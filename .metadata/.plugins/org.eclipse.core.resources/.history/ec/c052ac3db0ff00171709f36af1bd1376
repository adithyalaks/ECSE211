package ca.mcgill.ecse211.wallfollowing;

import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class PController implements UltrasonicController {

	/* Constants */
	private static final int MOTOR_SPEED = 200;
	private static final int FILTER_OUT = 60;
	private static final int MAX_ERROR = 40;

	private final int bandCenter;
	private final int bandWidth;
	private int distance;
	private int filterControl;

	public PController(int bandCenter, int bandwidth) {
		this.bandCenter = bandCenter;
		this.bandWidth = bandwidth;
		this.filterControl = 0;
		
		//Initialize robot rolling forward.
		WallFollowingLab.leftMotor.setSpeed(MOTOR_SPEED);
		WallFollowingLab.rightMotor.setSpeed(MOTOR_SPEED);
		WallFollowingLab.leftMotor.forward();
		WallFollowingLab.rightMotor.forward();
	}

	@Override
	public void processUSData(int distance) {

		// rudimentary filter - toss out invalid samples corresponding to null
		// signal.
		// (n.b. this was not included in the Bang-bang controller, but easily
		// could have).
		//
		if (distance >= 255 && filterControl < FILTER_OUT) {
			// bad value, do not set the distance var, however do increment the
			// filter value
			filterControl++;
		} else if (distance >= 255) {
			// We have repeated large values, so there must actually be nothing
			// there: leave the distance alone
			this.distance = distance;
		} else {
			// distance went below 255: reset filter and leave
			// distance alone.
			filterControl = 0;
			this.distance = distance;
		}

		// TODO: process a movement based on the us distance passed in (P style)
		
		//error_abs is a reference variable to the absolute difference between the robot's actual
		//distance from the wall, and the distance it ought to be at.
		int error_abs = Math.abs(this.distance - bandCenter);

		//This if statement allows for the robot to back away from any obstacle it is too close to.
		if (this.distance < 15) {
			WallFollowingLab.leftMotor.setSpeed(100); 
			WallFollowingLab.rightMotor.setSpeed(MOTOR_SPEED + 40);
			WallFollowingLab.leftMotor.forward();
			WallFollowingLab.rightMotor.backward();
		}

		//This else if block deals with the case that the absolute error is less than the bandwidth.
		//The robot ought to go forward in this case.
		else if (error_abs < bandWidth) {
			WallFollowingLab.leftMotor.setSpeed(MOTOR_SPEED);
			WallFollowingLab.rightMotor.setSpeed(MOTOR_SPEED);
			WallFollowingLab.leftMotor.forward();
			WallFollowingLab.rightMotor.forward();
		}

		//This else if block deals with cases where the robot's error in distance
		//is greater than the specified bandwidth, but where the robot is still able to
		//detect a near by obstacle.
		else if (error_abs <= MAX_ERROR) {
			
			//Here, if the robot is close to the wall, it moves away from the wall
			//in proportion to the difference between its actual distance and the band centre.
			if ((this.distance - bandCenter) < 0) {
				WallFollowingLab.leftMotor.setSpeed(MOTOR_SPEED + 6 * error_abs); 
				WallFollowingLab.rightMotor.setSpeed(MOTOR_SPEED - 6 * error_abs);
				WallFollowingLab.leftMotor.forward();
				WallFollowingLab.rightMotor.forward();
			}
			//Here, if the robot is further away from a wall than it should be,
			//it is made to move closer to the wall, in proportion to the size of its
			//error in distance.
			else if ((this.distance - bandCenter) > 0) {
				WallFollowingLab.leftMotor.setSpeed(MOTOR_SPEED - 6 * error_abs); 
				WallFollowingLab.rightMotor.setSpeed(MOTOR_SPEED + 6 * error_abs);
				WallFollowingLab.leftMotor.forward();
				WallFollowingLab.rightMotor.forward();
			}
		}
		
		//This block deals with cases where the ultrasonic sensor reports large distances 
		//away from a wall (typically when the robot is rounding a corner and has no nearby
		//obstacle within its view. In this case, the robot is instructed to take a wide-turn
		//so as to prevent it from turning into a wall too quickly.
		else if (error_abs > MAX_ERROR) {
			if ((this.distance - bandCenter) < 0) {
				WallFollowingLab.leftMotor.setSpeed(200); 
				WallFollowingLab.rightMotor.setSpeed(125);
				WallFollowingLab.leftMotor.forward();
				WallFollowingLab.rightMotor.forward();
			}

			else if ((this.distance - bandCenter) > 0) {
				WallFollowingLab.leftMotor.setSpeed(125); 
				WallFollowingLab.rightMotor.setSpeed(200);
				WallFollowingLab.leftMotor.forward();
				WallFollowingLab.rightMotor.forward();
			}

		}

	}

	@Override
	public int readUSDistance() {
		return this.distance;
	}

}
